// Code generated by MockGen. DO NOT EDIT.
// Source: repository/video-repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/GoGinApi/v2/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVideoRepository is a mock of VideoRepository interface
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockVideoRepository) Save(video entity.Video) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", video)
}

// Save indicates an expected call of Save
func (mr *MockVideoRepositoryMockRecorder) Save(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockVideoRepository)(nil).Save), video)
}

// Update mocks base method
func (m *MockVideoRepository) Update(video entity.Video) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", video)
}

// Update indicates an expected call of Update
func (mr *MockVideoRepositoryMockRecorder) Update(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVideoRepository)(nil).Update), video)
}

// Delete mocks base method
func (m *MockVideoRepository) Delete(video entity.Video) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", video)
}

// Delete indicates an expected call of Delete
func (mr *MockVideoRepositoryMockRecorder) Delete(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVideoRepository)(nil).Delete), video)
}

// FindAll mocks base method
func (m *MockVideoRepository) FindAll() []entity.Video {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.Video)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockVideoRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockVideoRepository)(nil).FindAll))
}

// CloseDB mocks base method
func (m *MockVideoRepository) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB
func (mr *MockVideoRepositoryMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockVideoRepository)(nil).CloseDB))
}
