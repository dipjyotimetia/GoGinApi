// Code generated by MockGen. DO NOT EDIT.
// Source: repository/database.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/GoGinApi/v2/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddExpense mocks base method
func (m *MockDataStore) AddExpense(expense entity.Expense) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", expense)
	ret0, _ := ret[0].(int64)
	return ret0
}

// AddExpense indicates an expected call of AddExpense
func (mr *MockDataStoreMockRecorder) AddExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockDataStore)(nil).AddExpense), expense)
}

// GetAllExpense mocks base method
func (m *MockDataStore) GetAllExpense() []entity.Expense {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExpense")
	ret0, _ := ret[0].([]entity.Expense)
	return ret0
}

// GetAllExpense indicates an expected call of GetAllExpense
func (mr *MockDataStoreMockRecorder) GetAllExpense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExpense", reflect.TypeOf((*MockDataStore)(nil).GetAllExpense))
}

// InsertUser mocks base method
func (m *MockDataStore) InsertUser(user entity.User) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(int64)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockDataStoreMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDataStore)(nil).InsertUser), user)
}

// GetAllUsers mocks base method
func (m *MockDataStore) GetAllUsers() []entity.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]entity.User)
	return ret0
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockDataStoreMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDataStore)(nil).GetAllUsers))
}

// GetUser mocks base method
func (m *MockDataStore) GetUser(id int64) entity.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(entity.User)
	return ret0
}

// GetUser indicates an expected call of GetUser
func (mr *MockDataStoreMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDataStore)(nil).GetUser), id)
}

// UpdateUser mocks base method
func (m *MockDataStore) UpdateUser(id int64, user entity.User) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, user)
	ret0, _ := ret[0].(int64)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockDataStoreMockRecorder) UpdateUser(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDataStore)(nil).UpdateUser), id, user)
}

// DeleteUser mocks base method
func (m *MockDataStore) DeleteUser(id int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(int64)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockDataStoreMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDataStore)(nil).DeleteUser), id)
}

// CloseDB mocks base method
func (m *MockDataStore) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB
func (mr *MockDataStoreMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockDataStore)(nil).CloseDB))
}
