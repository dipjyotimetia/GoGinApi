// Code generated by MockGen. DO NOT EDIT.
// Source: account-service.go

package mocks

import (
	entity "github.com/GoGinApi/v2/internal/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountService is a mock of AccountService interface
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// AddAccountDetails mocks base method
func (m *MockAccountService) AddAccountDetails(account entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountDetails", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountDetails indicates an expected call of AddAccountDetails
func (mr *MockAccountServiceMockRecorder) AddAccountDetails(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountDetails", reflect.TypeOf((*MockAccountService)(nil).AddAccountDetails), account)
}

// GetAccountDetails mocks base method
func (m *MockAccountService) GetAccountDetails(accountID int64) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetails", accountID)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetails indicates an expected call of GetAccountDetails
func (mr *MockAccountServiceMockRecorder) GetAccountDetails(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetails", reflect.TypeOf((*MockAccountService)(nil).GetAccountDetails), accountID)
}

// UpdateAccountDetails mocks base method
func (m *MockAccountService) UpdateAccountDetails(accountID int64, account entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountDetails", accountID, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountDetails indicates an expected call of UpdateAccountDetails
func (mr *MockAccountServiceMockRecorder) UpdateAccountDetails(accountID, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountDetails", reflect.TypeOf((*MockAccountService)(nil).UpdateAccountDetails), accountID, account)
}

// MockExpenseService is a mock of ExpenseService interface
type MockExpenseService struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseServiceMockRecorder
}

// MockExpenseServiceMockRecorder is the mock recorder for MockExpenseService
type MockExpenseServiceMockRecorder struct {
	mock *MockExpenseService
}

// NewMockExpenseService creates a new mock instance
func NewMockExpenseService(ctrl *gomock.Controller) *MockExpenseService {
	mock := &MockExpenseService{ctrl: ctrl}
	mock.recorder = &MockExpenseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpenseService) EXPECT() *MockExpenseServiceMockRecorder {
	return m.recorder
}

// AddExpense mocks base method
func (m *MockExpenseService) AddExpense(expense entity.Expense) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", expense)
	ret0, _ := ret[0].(int64)
	return ret0
}

// AddExpense indicates an expected call of AddExpense
func (mr *MockExpenseServiceMockRecorder) AddExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockExpenseService)(nil).AddExpense), expense)
}

// GetAllExpense mocks base method
func (m *MockExpenseService) GetAllExpense() []entity.Expense {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExpense")
	ret0, _ := ret[0].([]entity.Expense)
	return ret0
}

// GetAllExpense indicates an expected call of GetAllExpense
func (mr *MockExpenseServiceMockRecorder) GetAllExpense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExpense", reflect.TypeOf((*MockExpenseService)(nil).GetAllExpense))
}

// GetExpense mocks base method
func (m *MockExpenseService) GetExpense(id int64) (entity.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpense", id)
	ret0, _ := ret[0].(entity.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpense indicates an expected call of GetExpense
func (mr *MockExpenseServiceMockRecorder) GetExpense(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpense", reflect.TypeOf((*MockExpenseService)(nil).GetExpense), id)
}

// UpdateExpense mocks base method
func (m *MockExpenseService) UpdateExpense(id int64, expense entity.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", id, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpense indicates an expected call of UpdateExpense
func (mr *MockExpenseServiceMockRecorder) UpdateExpense(id, expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockExpenseService)(nil).UpdateExpense), id, expense)
}

// DeleteExpense mocks base method
func (m *MockExpenseService) DeleteExpense(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpense indicates an expected call of DeleteExpense
func (mr *MockExpenseServiceMockRecorder) DeleteExpense(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockExpenseService)(nil).DeleteExpense), id)
}

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ResetPassword mocks base method
func (m *MockUserService) ResetPassword(resetPassword entity.ResetPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", resetPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockUserServiceMockRecorder) ResetPassword(resetPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserService)(nil).ResetPassword), resetPassword)
}

// Create mocks base method
func (m *MockUserService) Create(user entity.Register) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserServiceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), user)
}

// Login mocks base method
func (m *MockUserService) Login(name, email, password, createdAt, updatedAt string, user entity.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", name, email, password, createdAt, updatedAt, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockUserServiceMockRecorder) Login(name, email, password, createdAt, updatedAt, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), name, email, password, createdAt, updatedAt, user)
}

// CheckUserExist mocks base method
func (m *MockUserService) CheckUserExist(user entity.Register) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserExist indicates an expected call of CheckUserExist
func (mr *MockUserServiceMockRecorder) CheckUserExist(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockUserService)(nil).CheckUserExist), user)
}

// CheckAndRetrieveUserIDViaEmail mocks base method
func (m *MockUserService) CheckAndRetrieveUserIDViaEmail(createReset entity.CreateReset) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndRetrieveUserIDViaEmail", createReset)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckAndRetrieveUserIDViaEmail indicates an expected call of CheckAndRetrieveUserIDViaEmail
func (mr *MockUserServiceMockRecorder) CheckAndRetrieveUserIDViaEmail(createReset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndRetrieveUserIDViaEmail", reflect.TypeOf((*MockUserService)(nil).CheckAndRetrieveUserIDViaEmail), createReset)
}
