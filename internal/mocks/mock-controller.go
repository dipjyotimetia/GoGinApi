// Code generated by MockGen. DO NOT EDIT.
// Source: account-controller.go

// Package mock_controller is a generated GoMock package.
package mocks

import (
	"github.com/GoGinApi/v2/internal/entity"
	"github.com/gin-gonic/gin"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockAccountController is a mock of AccountController interface
type MockAccountController struct {
	ctrl     *gomock.Controller
	recorder *MockAccountControllerMockRecorder
}

// MockAccountControllerMockRecorder is the mock recorder for MockAccountController
type MockAccountControllerMockRecorder struct {
	mock *MockAccountController
}

// NewMockAccountController creates a new mock instance
func NewMockAccountController(ctrl *gomock.Controller) *MockAccountController {
	mock := &MockAccountController{ctrl: ctrl}
	mock.recorder = &MockAccountControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountController) EXPECT() *MockAccountControllerMockRecorder {
	return m.recorder
}

// AddAccountDetails mocks base method
func (m *MockAccountController) AddAccountDetails(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountDetails", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountDetails indicates an expected call of AddAccountDetails
func (mr *MockAccountControllerMockRecorder) AddAccountDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountDetails", reflect.TypeOf((*MockAccountController)(nil).AddAccountDetails), ctx)
}

// GetAccountDetails mocks base method
func (m *MockAccountController) GetAccountDetails(ctx *gin.Context) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetails", ctx)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetails indicates an expected call of GetAccountDetails
func (mr *MockAccountControllerMockRecorder) GetAccountDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetails", reflect.TypeOf((*MockAccountController)(nil).GetAccountDetails), ctx)
}

// UpdateAccountDetails mocks base method
func (m *MockAccountController) UpdateAccountDetails(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountDetails", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountDetails indicates an expected call of UpdateAccountDetails
func (mr *MockAccountControllerMockRecorder) UpdateAccountDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountDetails", reflect.TypeOf((*MockAccountController)(nil).UpdateAccountDetails), ctx)
}

// MockExpenseController is a mock of ExpenseController interface
type MockExpenseController struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseControllerMockRecorder
}

// MockExpenseControllerMockRecorder is the mock recorder for MockExpenseController
type MockExpenseControllerMockRecorder struct {
	mock *MockExpenseController
}

// NewMockExpenseController creates a new mock instance
func NewMockExpenseController(ctrl *gomock.Controller) *MockExpenseController {
	mock := &MockExpenseController{ctrl: ctrl}
	mock.recorder = &MockExpenseControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpenseController) EXPECT() *MockExpenseControllerMockRecorder {
	return m.recorder
}

// AddExpense mocks base method
func (m *MockExpenseController) AddExpense(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExpense indicates an expected call of AddExpense
func (mr *MockExpenseControllerMockRecorder) AddExpense(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockExpenseController)(nil).AddExpense), ctx)
}

// GetAllExpense mocks base method
func (m *MockExpenseController) GetAllExpense() []entity.Expense {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExpense")
	ret0, _ := ret[0].([]entity.Expense)
	return ret0
}

// GetAllExpense indicates an expected call of GetAllExpense
func (mr *MockExpenseControllerMockRecorder) GetAllExpense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExpense", reflect.TypeOf((*MockExpenseController)(nil).GetAllExpense))
}

// GetExpense mocks base method
func (m *MockExpenseController) GetExpense(ctx *gin.Context) (entity.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpense", ctx)
	ret0, _ := ret[0].(entity.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpense indicates an expected call of GetExpense
func (mr *MockExpenseControllerMockRecorder) GetExpense(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpense", reflect.TypeOf((*MockExpenseController)(nil).GetExpense), ctx)
}

// UpdateExpense mocks base method
func (m *MockExpenseController) UpdateExpense(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpense indicates an expected call of UpdateExpense
func (mr *MockExpenseControllerMockRecorder) UpdateExpense(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockExpenseController)(nil).UpdateExpense), ctx)
}

// DeleteExpense mocks base method
func (m *MockExpenseController) DeleteExpense(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpense indicates an expected call of DeleteExpense
func (mr *MockExpenseControllerMockRecorder) DeleteExpense(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockExpenseController)(nil).DeleteExpense), ctx)
}

// MockUserController is a mock of UserController interface
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// InitiatePasswordReset mocks base method
func (m *MockUserController) InitiatePasswordReset(ctx *gin.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePasswordReset", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePasswordReset indicates an expected call of InitiatePasswordReset
func (mr *MockUserControllerMockRecorder) InitiatePasswordReset(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePasswordReset", reflect.TypeOf((*MockUserController)(nil).InitiatePasswordReset), ctx)
}

// ResetPassword mocks base method
func (m *MockUserController) ResetPassword(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockUserControllerMockRecorder) ResetPassword(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserController)(nil).ResetPassword), ctx)
}

// Create mocks base method
func (m *MockUserController) Create(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserControllerMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserController)(nil).Create), ctx)
}

// Login mocks base method
func (m *MockUserController) Login(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockUserControllerMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserController)(nil).Login), ctx)
}

// Logout mocks base method
func (m *MockUserController) Logout(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx)
}

// Logout indicates an expected call of Logout
func (mr *MockUserControllerMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserController)(nil).Logout), ctx)
}

// CheckUserExist mocks base method
func (m *MockUserController) CheckUserExist(ctx *gin.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserExist indicates an expected call of CheckUserExist
func (mr *MockUserControllerMockRecorder) CheckUserExist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockUserController)(nil).CheckUserExist), ctx)
}

// CheckAndRetrieveUserIDViaEmail mocks base method
func (m *MockUserController) CheckAndRetrieveUserIDViaEmail(ctx *gin.Context) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndRetrieveUserIDViaEmail", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckAndRetrieveUserIDViaEmail indicates an expected call of CheckAndRetrieveUserIDViaEmail
func (mr *MockUserControllerMockRecorder) CheckAndRetrieveUserIDViaEmail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndRetrieveUserIDViaEmail", reflect.TypeOf((*MockUserController)(nil).CheckAndRetrieveUserIDViaEmail), ctx)
}
